
    
     /*
     * Function pointer to select the transfer functions
     */
    
    uint16_t (*transferFunction)(uint16_t);
    
    /**************************************************************
     *
     * Definition of constants 
     *
     */
    const int SampFreq = 050;       /**< Sampling frequency (in Hz) */
    const int PWMFreq = 2000;       /**< PWM frequency (in Hz) */
    
    /************************************************************** 
     * 
     * Configuration section
     * 
     */

    /* Configure UART */
    UartInit(PBCLK_F_HZ, 115200);

    printf("SIE - Project 0 demo \n\r");
    printf("%s, %s\r\n", __DATE__, __TIME__);

    TRISAbits.TRISA3 = 0;
    LATAbits.LATA3 = 1;

    /*
     * ADC Configuration 
     * 
     * Source: Chan 0, Source: Timer3 
     */
    ADCconfig(0, SrcTimer3, 0);
    /*
     * Set Timer3 to run at required sampling frequency 
     */
    TypeBTimer16bitSetFreq(Timer3, SampFreq);
    Timer3Start();

    /*
     * Configure PWM
     *
     * PWM frequency is PWMFreq 
     */
    PWMconfigFreq(PWMFreq);
    Timer2Start();

    /*
     * Print the system configuration 
     *
     */
    printf("Sampling freq: %d\r\nPWM freq.: %d\r\n\n",SampFreq, PWMFreq);
    
    /*
     * Set the transfer function to point to the desired function.
     */
    transferFunction = tf_avgNSamples;
    
    /****************************************************************
     * 
     * Main cycle
     */
    while (1) {
        uint16_t res; 

        /* Read ADC */
        res = ADCReadRetentive();
        
        /* Compute output val */
        uint16_t PWMval = (*transferFunction)(res);
        
        /* Set output */
        PWMsetDutyCycle(PWMval);
        
        /* Toggle control pin at sampling frequency */
        LATAINV = 0x0008;
    }



===========================TIMER=============================================
    int cont = 0;
    TypeBTimer16bitSetFreq(2, 20);
    // Set RA3 as output
    TRISAbits.TRISA3 = 0;
    UartInit(PBCLK_F_HZ, 115200L);
    TMR2 = 0;
    PutChar('x');
    
    while(1){
        PutChar('y');
        while(Timer2GetEOC() == 0);
        PutChar('z');
        cont++;
        if(cont % 10 == 0){
            PORTAbits.RA3 = !PORTAbits.RA3;
        }
        
        Timer2ClearEOC();
    }
==========================ADC=================================================

 UartInit(PBCLK_F_HZ, 115200);
    ADCconfig(4,SrcAuto, 16);
    ADCon();
    int tensao;
    while(1){
        ADCReadRetentive();
        AD1CON1bits.ASAM = 1; // Start conversion
        while (IFS1bits.AD1IF == 0);
        for(int i = 0; i < 1000; i++){
            for(int j = 0; j < 1000; j++){
        }
        }
        tensao = (ADC1BUF0 * 33 + 511) / 1023;
        printf("%d\n",tensao);
    }